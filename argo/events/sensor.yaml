apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: git-sensor
  namespace: argo-events
spec:
  dependencies:
    - name: git-dep
      eventSourceName: git-webhook-event
      eventName: git-webhook
  triggers:
    - template:
        name: workflow-trigger
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: git-checkout-test-
                namespace: argo
              spec:
                entrypoint: main
                volumeClaimTemplates: []  # Remove this section to prevent creating a new PVC each time
                volumes:
                  - name: workdir
                    persistentVolumeClaim:
                      claimName: workdir-pvc  # Reference your existing PVC here
                templates:
                  - name: main
                    steps:
                      - - name: git-checkout
                          template: git-checkout
                      - - name: build-and-push
                          template: build-and-push

                  - name: git-checkout
                    container:
                      image: bitnami/git:latest
                      command: ["/bin/sh", "-c"]
                      args:
                        - |
                          rm -rf /mnt/vol
                          git clone https://github.com/regal2t/argo.git /mnt/vol
                          cd /mnt/vol && git checkout main
                          echo "Current Git SHA:"
                          git rev-parse HEAD > /mnt/vol/git_sha.txt
                          ls /mnt/vol
                      volumeMounts:
                        - name: workdir
                          mountPath: /mnt/vol

                  # - name: verify-work-directory
                  #   container:
                  #     image: alpine:latest
                  #     command: ["sh", "-c"]
                  #     args:
                  #       - |
                  #         echo "Contents of /mnt/vol directory:"
                  #         ls -al /mnt/vol
                  #         echo "Contents of /mnt/vol/argo directory:"
                  #         ls -al /mnt/vol/argo
                  #         echo "Git SHA:"
                  #         cat /mnt/vol/git_sha.txt
                  #     volumeMounts:
                  #       - name: workdir
                  #         mountPath: /mnt/vol

                  - name: build-and-push
                    container:
                      image: docker:20.10.7-dind
                      command: ["sh", "-c"]
                      args:
                        - |
                          dockerd &
                          while ! docker info > /dev/null 2>&1; do
                            sleep 1
                          done
                          echo "Docker daemon started!"
                          apk update && apk add git
                          cd /mnt/vol && git branch
                          COMMIT_SHA=$(git rev-parse --short HEAD)
                          IMAGE_TAG="rajutiwari2024/argo-test:${COMMIT_SHA}"
                          echo "Logging in to Docker Hub..."
                          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                          echo "Building Docker Image..."
                          docker build -t $IMAGE_TAG .
                          echo "Pushing Docker Image..."
                          docker push $IMAGE_TAG
                          echo "Docker Image pushed successfully!"
                          echo $IMAGE_TAG > image_tag.txt
                      env:
                        - name: DOCKER_USERNAME
                          valueFrom:
                            secretKeyRef:
                              name: docker-credentials
                              key: username
                        - name: DOCKER_PASSWORD
                          valueFrom:
                            secretKeyRef:
                              name: docker-credentials
                              key: password
                      volumeMounts:
                        - name: workdir
                          mountPath: /mnt/vol
                      securityContext:
                        privileged: true

